package com.liferay.rbi.workflow.email.notification.portlet;

import com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel;
import com.liferay.asset.entry.rel.service.AssetEntryAssetCategoryRelLocalServiceUtil;
import com.liferay.asset.kernel.model.AssetCategory;
import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.model.AssetVocabulary;
import com.liferay.asset.kernel.service.AssetCategoryLocalServiceUtil;
import com.liferay.asset.kernel.service.AssetEntryLocalServiceUtil;
import com.liferay.asset.kernel.service.AssetVocabularyLocalServiceUtil;
import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.document.library.kernel.model.DLFileEntry;
import com.liferay.document.library.kernel.model.DLFileVersion;
import com.liferay.document.library.kernel.service.DLFileEntryLocalServiceUtil;
import com.liferay.expando.kernel.model.ExpandoColumn;
import com.liferay.expando.kernel.model.ExpandoValue;
import com.liferay.expando.kernel.service.ExpandoColumnLocalServiceUtil;
import com.liferay.expando.kernel.service.ExpandoValueLocalServiceUtil;
import com.liferay.journal.model.JournalArticle;
import com.liferay.journal.service.JournalArticleLocalServiceUtil;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.configuration.module.configuration.ConfigurationProviderUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.OrderFactoryUtil;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Role;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.UserNotificationDeliveryConstants;
import com.liferay.portal.kernel.model.UserNotificationEvent;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.security.permission.PermissionCheckerFactoryUtil;
import com.liferay.portal.kernel.security.permission.PermissionThreadLocal;
import com.liferay.portal.kernel.service.RoleLocalServiceUtil;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.service.UserNotificationEventLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.DefaultWorkflowLog;
import com.liferay.portal.kernel.workflow.DefaultWorkflowNode;
import com.liferay.portal.kernel.workflow.WorkflowLog;
import com.liferay.portal.kernel.workflow.WorkflowNode;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.workflow.kaleo.definition.util.KaleoLogUtil;
import com.liferay.portal.workflow.kaleo.model.KaleoLog;
import com.liferay.portal.workflow.kaleo.model.KaleoNode;
import com.liferay.portal.workflow.kaleo.model.KaleoTaskAssignmentInstance;
import com.liferay.portal.workflow.kaleo.model.KaleoTaskInstanceToken;
import com.liferay.portal.workflow.kaleo.service.KaleoLogLocalServiceUtil;
import com.liferay.portal.workflow.kaleo.service.KaleoNodeLocalServiceUtil;
import com.liferay.portal.workflow.kaleo.service.KaleoTaskAssignmentInstanceLocalServiceUtil;
import com.liferay.portal.workflow.kaleo.service.KaleoTaskInstanceTokenLocalServiceUtil;
import com.liferay.rbi.email.template.common.api.EmailUtil;
import com.liferay.rbi.email.template.model.RBIEmailConfiguration;
import com.liferay.rbi.email.template.model.RBIEmailTemplate;
import com.liferay.rbi.email.template.service.RBIEmailConfigurationLocalServiceUtil;
import com.liferay.rbi.email.template.service.RBIEmailTemplateLocalServiceUtil;
import com.liferay.rbi.workflow.email.notification.constants.RbiWorkflowEmailNotificationPortletKeys;
import com.liferay.rbi.workflow.permission.checker.util.WorkflowPermissionCheckerUtil;
import com.rbi.file.workflow.configuration.WorkflowGeneralConfiguration;
import com.rbi.file.workflow.configuration.WorkflowPublishNotificationAdditionEmailConfiguration;
import com.rbi.requestor.widget.service.builder.model.Content_Requestor;
import com.rbi.requestor.widget.service.builder.service.Content_RequestorLocalServiceUtil;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;

import javax.portlet.Portlet;

import org.osgi.service.component.annotations.Component;

/**
 * @author htpr083
 * 
 *         This Portlet is used for sending custom email and dxp notifications
 *         to required users based on different review stages in all apllicable
 *         workflow.
 *
 */
@Component(immediate = true, property = { "com.liferay.portlet.display-category=category.sample",
		"com.liferay.portlet.header-portlet-css=/css/main.css", "com.liferay.portlet.instanceable=true",
		"javax.portlet.display-name=RbiWorkflowEmailNotification", "javax.portlet.init-param.template-path=/",
		"javax.portlet.init-param.view-template=/view.jsp",
		"javax.portlet.name=" + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOWEMAILNOTIFICATION,
		"javax.portlet.resource-bundle=content.Language",
		"javax.portlet.security-role-ref=power-user,user" }, service = Portlet.class)
public class RbiWorkflowEmailNotificationPortlet extends MVCPortlet {

	
	private static final String DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_EN = "Publishing id %s of  Request %s - %s has been published in %s language on %s %s.";
	private static final String DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_HI = "\u0906\u0935\u0947\u0926\u0928 \u0915\u0947 \u0906\u0935\u0947\u0926\u0928 \u0938\u0902\u0916\u094D\u092F\u093E %s %s - %s \u0915\u094B %s \u092C\u091C\u0947 %s %s \u092E\u0947\u0902 \u092A\u094D\u0930\u0915\u093E\u0936\u093F\u0924 \u0915\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948\u0964";
	private static final String RBI_REQUEST_RESOLVED_BODY = "rbi.request.resolved.body";
	private static final String RBI_REQUEST_APPROVED_BODY = "rbi.request.approved.body";
	private static final String RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING = "rbi.email.body.immediate.publishing";
	private static final String RBI_EMAIL_BODY_SCHEDULED_FOR_PULISHING = "rbi.email.body.scheduled.for.pulishing";
	private static final String RBI_EMAIL_BODY_RESCHEDULE = "rbi.email.body.reschedule";
	private static final String RBI_EMAIL_BODY_HOLD = "rbi.email.body.hold";
	private static final String RBI_WORKFLOW_REQUEST_APPROVED_WITHOUT_COMMENT = "rbi.workflow.request.approved.without.comment";
	private static final String RBI_WORKFLOW_REQUEST_APPROVED = "rbi.workflow.request.approved";
	private static final String RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY = "rbi.request.of.publishing.workflow.assigned.to.user.body";
	private static final String RBI_WORKFLOW_REQUEST_REJECTED_WITHOUT_COMMENT = "rbi.workflow.request.rejected.without.comment";
	private static final String RBI_WORKFLOW_REQUEST_REJECTED = "rbi.workflow.request.rejected";
	private static final String RBI_REQUEST_APPROVED_FOR_CHANGE_REQUEST = "rbi.request.approved.for.change.request";
	private static final String RBI_REQUEST_CLOSED_BODY = "rbi.request.closed.body";
	private static final String RBI_REQUEST_EDITED_BODY = "rbi.request.edited.body";
	private static final String RBI_REQUEST_CREATED_TEMPLATE_BODY = "rbi.request.created.template.body";
	private static final String RBI_REQUEST_CREATED_INITIATE_TEMPLATE_BODY = "rbi.request.created.initiate.template.body";
	private static final String RBI_REQUEST_REJECTED_BODY = "rbi.request.rejected.body";
	private static final String HINDI_YOU = LanguageUtil.get(new Locale("hi", "IN"), "rbi.you");
	private static final Locale HINDI_LOCALE = new Locale("hi", "IN");
	private static final Locale ENGLISH_LOCALE = Locale.US;

	public static void sendEmail(String mailSubject, String mailBody, String hindiMailBody, String mailLink,
			String emailTo) {
        if (_log.isInfoEnabled()) { _log.info("sendEmail() start"); }

		String emailSubject = StringPool.BLANK;
		_log.info("mailSubject ::: " + mailSubject);
		String emailBody = StringPool.BLANK;
		if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
		String emailBodyWithLink = StringPool.BLANK;
		_log.info("mailLink ::: " + mailLink);
		String tempEmail = StringPool.BLANK;
		_log.info("emailTo ::: " + emailTo);
		if (emailTo.contains(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_LIFERAY_EMAIL)) {
			_log.info("Inside If emailTo ::: ");
			_log.info("Replacing " + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_LIFERAY_EMAIL + " with "
					+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAILINATOR_EMAIL);
			tempEmail = emailTo.replace(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_LIFERAY_EMAIL,
					RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAILINATOR_EMAIL);
					_log.info("tempEmail ::: " + tempEmail);
					_log.info("Outside If emailTo ::: ");
		} else {
			tempEmail = emailTo;
			_log.info("Inside Else emailTo ::: ");
			_log.info("tempEmail ::: " + tempEmail);
			_log.info("Outside Else emailTo ::: ");
		}
		String[] toArray = { tempEmail };
		// String[] toArray = { emailTo };
		_log.info("toArray ::: " + Arrays.toString(toArray));
		_log.info("RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_TEMPLATE_KEY ::: "
				+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_TEMPLATE_KEY);
		try {
			_log.info("Fetching template...");
			RBIEmailTemplate rbiEmailTemplate = RBIEmailTemplateLocalServiceUtil
					.findByEmalKeyName(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_TEMPLATE_KEY);
			_log.info("Fetched template...");
			_log.info("rbiEmailTemplate ::: " + rbiEmailTemplate);

			if (Validator.isNotNull(rbiEmailTemplate)) {
				emailSubject = rbiEmailTemplate.getSubject()
						.replace(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EMAIL_SUBJECT, mailSubject);
				_log.info("Workflow email subject==========" + emailSubject);	
				_log.info("rbiEmailTemplate.getBody()==========" + rbiEmailTemplate.getBody());
				emailBody = rbiEmailTemplate.getBody()
						.replace(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EMAIL_BODY, mailBody)
						.replace("$[hindi_body]", hindiMailBody);
				_log.info("Workflow email body===========" + emailBody);
				// emailBodyWithLink =
				// emailBody.replace(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EMAIL_LINK,
				// PropsUtil.get(mailLink));
				emailBodyWithLink = emailBody.replace(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EMAIL_LINK,
						mailLink);
				_log.info("Workflow email body with link===========" + emailBodyWithLink);
			} else {
				// if template not found -> send only this content
				emailSubject = mailSubject;
				_log.info("Default email subject==========" + emailSubject);
				emailBodyWithLink = mailBody;
			}
			if (Validator.isNotNull(rbiEmailTemplate)) {
			RBIEmailConfiguration rbiEmailConfiguration = RBIEmailConfigurationLocalServiceUtil
					.fetchRBIEmailConfiguration(Long.parseLong(rbiEmailTemplate.getEmailFrom()));
			if (Validator.isNotNull(rbiEmailConfiguration)) {
			EmailUtil.sendEmail(rbiEmailConfiguration.getFromAddress(), rbiEmailConfiguration.getPassword(), toArray,
					null, null, emailSubject, emailBodyWithLink, null, null);
			}
			}
			_log.info("______________________________email sent to ::: " + emailTo);

		} catch (SystemException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("sendEmail() completed"); }
}

	public static boolean sendCustomUserNotification(Long companyId, Long userId, Long senderUserId,
			String payloadStr, boolean isArchived) {
        if (_log.isInfoEnabled()) { _log.info("sendCustomUserNotification() start"); }

		try {

			Date date = new Date();
			long userNotificationId = CounterLocalServiceUtil.increment();
			UserNotificationEvent userNotificationEvent = UserNotificationEventLocalServiceUtil
					.createUserNotificationEvent(userNotificationId);

			userNotificationEvent.setCompanyId(companyId);
			userNotificationEvent.setUserId(senderUserId);
			userNotificationEvent.setType(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MyWorkflowTaskPortlet);
			userNotificationEvent.setDeliveryType(UserNotificationDeliveryConstants.TYPE_WEBSITE);
			userNotificationEvent.setDeliverBy(userId);
			userNotificationEvent.setPayload(payloadStr);
			userNotificationEvent.setDelivered(Boolean.TRUE);
			userNotificationEvent.setActionRequired(Boolean.FALSE);
			userNotificationEvent.setArchived(isArchived);
			userNotificationEvent.setTimestamp(date.getTime());
			_log.info("UserNotificationEvent===>" + userNotificationEvent);
			_log.info("UserNotificationEvent ==  userNotificationId =>" + userNotificationId);
			UserNotificationEventLocalServiceUtil.updateUserNotificationEvent(userNotificationEvent);
			User tempUser = UserLocalServiceUtil.getUser(senderUserId);

			_log.info("______________________________dxp notification sent to :: " + tempUser.getFullName());
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
			return Boolean.FALSE;
		}
		return Boolean.TRUE;
	
        if (_log.isInfoEnabled()) { _log.info("sendCustomUserNotification() completed"); }
}

	// Requesting Workflow - from Requestor to Deptartment_Approver (email + dxp)
	// USING IN REQUESTING WORKFLOW
	public static void sendingToDeptApp(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String modifiedUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User modifiedUser = null;
		try {

			if (!Validator.isBlank(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();
					
					if (Validator.isNotNull(contentRequestor.getDeptAppId()) && contentRequestor.getDeptAppId() > 0) {
						_log.info("----------------- Inside If get Dept App Id ----------------- START");
						senderUser = UserLocalServiceUtil.getUser(contentRequestor.getDeptAppId());
						mailIds.add(senderUser.getEmailAddress());
						_log.info("----------------- Inside If get Dept App Id ----------------- END ");
					}

					if (!contentRequestor.getIsEdited()) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
						// reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_3 +
						// prevUserName
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_4;
						//
						mailSubject = "Publishing Request " + reqID + "  is Created";

						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_CREATED_INITIATE_TEMPLATE_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), senderUser.getFullName() });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_CREATED_INITIATE_TEMPLATE_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), senderUser.getFullName() });

						_log.info("%%%%%%%%%%%%%%%%%%%%%%%%%%%% NEW :::: " + mailBody);

					} else {

						if (Validator.isNotNull(contentRequestor.getModifiedUserId())
								&& contentRequestor.getModifiedUserId() > 0) {
							modifiedUser = UserLocalServiceUtil.getUser(contentRequestor.getModifiedUserId());
							modifiedUserName = modifiedUser.getFullName();

							// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
							// reqID
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
							// + contentRequestor.getRequestTitle()
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_5 +
							// modifiedUserName
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_4;
							mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_EDITED_BODY, new String[] {
									reqID, contentRequestor.getRequestTitle(), modifiedUserName, senderUser.getFullName()});
							hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_EDITED_BODY, new String[] {
									reqID, contentRequestor.getRequestTitle(), modifiedUserName, senderUser.getFullName()});

							mailSubject = "Publishing Request " + reqID + "  is Edited";

						}

					}
					
					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {

						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								Content_Requestor.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
						// RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
						// contentRequestor.getContentRequestorId());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
								RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUser.getUserId(), payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - from Requestor to Creator
	// USING IN REQUESTING WORKFLOW
	public static void sendingRequestorToCreator(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String modifiedUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String roleName = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER;
		List<String> mailIds = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		User modifiedUser = null;
		Role roleContMaker = null;
		List<User> userListContMaker = new ArrayList<>();
		try {
			if (!Validator.isBlank(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();
					prevUserName = contentRequestor.getUserName();

					if (!contentRequestor.getIsEdited()) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
						// reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_3 +
						// prevUserName
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_4;
						//
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_CREATED_TEMPLATE_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "you" });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_CREATED_TEMPLATE_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, HINDI_YOU });

						_log.info("%%%%%%%% NEW :::: " + mailBody);

						mailSubject = "Publishing Request " + reqID + "  is Created";

					} else {

						if (Validator.isNotNull(contentRequestor.getModifiedUserId())
								&& contentRequestor.getModifiedUserId() > 0) {
							modifiedUser = UserLocalServiceUtil.getUser(contentRequestor.getModifiedUserId());
							modifiedUserName = modifiedUser.getFullName();

							// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
							// reqID
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
							// + contentRequestor.getRequestTitle()
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_5 +
							// modifiedUserName
							// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_4;
							mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_EDITED_BODY, new String[] {
									reqID, contentRequestor.getRequestTitle(), modifiedUserName, "you" });
							hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_EDITED_BODY, new String[] {
									reqID, contentRequestor.getRequestTitle(), modifiedUserName, HINDI_YOU });

							mailSubject = "Publishing Request " + reqID + "  is Edited";

						}

					}
					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);

					roleContMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(), roleName);

					if (Validator.isNotNull(roleContMaker.getRoleId()) && roleContMaker.getRoleId() > 0) {
						userListContMaker = UserLocalServiceUtil.getRoleUsers(roleContMaker.getRoleId());
						for (User userContMaker : userListContMaker) {

							if (Validator.isNotNull(roleContMaker.getRoleId()) && roleContMaker.getRoleId() > 0) {
								User senderContMaker = UserLocalServiceUtil.getUser(userContMaker.getUserId());

								if (!senderUserIds.contains(senderContMaker.getUserId())) {
									senderUserIds.add(senderContMaker.getUserId());
								}

								if (!mailIds.contains(senderContMaker.getEmailAddress())) {
									mailIds.add(senderContMaker.getEmailAddress());
								}

							}

						}
					}
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								Content_Requestor.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						 payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
						 RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
						 payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
						 contentRequestor.getContentRequestorId());
						//payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						for (long senderUserId : senderUserIds) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - from Requestor to Publisher (role-dxp + user-email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingRequestorToPublisher(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
        if (_log.isInfoEnabled()) { _log.info("sendingRequestorToPublisher() start"); }

		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User completionUser = null;
		User prevUser = null;
		Role rolePubl = null;
		List<User> userListPubl = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();

					if (Validator.isNotNull(contentRequestor.getUserId()) && contentRequestor.getUserId() > 0) {
						prevUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
						prevUserName = prevUser.getFullName();
					}

					List<KaleoTaskInstanceToken> kaleoTaskListReq = fetchKaleoDetails(
							contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);

						if (Validator.isNotNull(kaleoTaskReq)) {
							completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());

							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}

						}

					}

					// sending to Publisher role
					rolePubl = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_PUBLISHER);
					userListPubl = UserLocalServiceUtil.getRoleUsers(rolePubl.getRoleId());
					for (User userPubl : userListPubl) {
						if (!senderUserIds.contains(userPubl.getUserId())) {
							senderUserIds.add(userPubl.getUserId());
						}
					}
					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 +
					// prevUserName
					// + StringPool.PERIOD + "It is assigned to Publisher.";
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Publisher" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Publisher" });

					mailSubject = "Publishing Request " + reqID + " is Rejected";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								Content_Requestor.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
								RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						for (long senderUserId : senderUserIds) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("sendingRequestorToPublisher() completed"); }
}

	// Requesting Workflow - from DOC to Creator (role-dxp + user-email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingDocToCreator(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User completionUser = null;
		User prevUser = null;
		Role roleContMaker = null;
		List<User> userListContMaker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();

					if (Validator.isNotNull(userId) && userId > 0) {
						prevUser = UserLocalServiceUtil.getUser(userId);
						prevUserName = prevUser.getFullName();
					}

					List<KaleoTaskInstanceToken> kaleoTaskListReq = fetchKaleoDetails(
							contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCreatorReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					// sending to Content Maker role
					roleContMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
					userListContMaker = UserLocalServiceUtil.getRoleUsers(roleContMaker.getRoleId());
					for (User userContMaker : userListContMaker) {
						if (!senderUserIds.contains(userContMaker.getUserId())) {
							senderUserIds.add(userContMaker.getUserId());
						}
					}
					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 +
					// prevUserName
					// + StringPool.PERIOD + "It is assigned to Content Maker.";

					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });

					mailSubject = "Publishing Request " + reqID + " is Rejected";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								Content_Requestor.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
								RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						for (long senderUserId : senderUserIds) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - from Publisher to Creator (role-dxp + user-email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingPublisherToCreatorReqWF(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User completionUser = null;
		User prevUser = null;
		Role roleContMaker = null;
		List<User> userListContMaker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();

					if (Validator.isNotNull(userId) && userId > 0) {
						prevUser = UserLocalServiceUtil.getUser(userId);
						prevUserName = prevUser.getFullName();
					}

					List<KaleoTaskInstanceToken> kaleoTaskListReq = fetchKaleoDetails(
							contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCreatorReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					// sending to Content Maker role
					roleContMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
					userListContMaker = UserLocalServiceUtil.getRoleUsers(roleContMaker.getRoleId());
					for (User userContMaker : userListContMaker) {
						if (!senderUserIds.contains(userContMaker.getUserId())) {
							senderUserIds.add(userContMaker.getUserId());
						}
					}
					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 +
					// prevUserName
					// + StringPool.PERIOD + "It is assigned to Content Maker.";
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_REJECTED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });

					mailSubject = "Publishing Request " + reqID + " is Rejected";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								Content_Requestor.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
								RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						for (long senderUserId : senderUserIds) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - when Requestor Closing - To All involved users
	// USING IN REQUESTING WORKFLOW
	public static void approvingByRequestor(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		User prevUser = null;
		User reqCreatorUser = null;
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();

					if (Validator.isNotNull(userId) && userId > 0) {
						prevUser = UserLocalServiceUtil.getUser(userId);
						prevUserName = prevUser.getFullName();
					}

					// send to asset creator
					if (Validator.isNotNull(contentRequestor.getUserId()) && contentRequestor.getUserId() > 0) {
						reqCreatorUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
						if (!senderUserIds.contains(reqCreatorUser.getUserId())) {
							senderUserIds.add(reqCreatorUser.getUserId());
						}
						if (!mailIds.contains(reqCreatorUser.getEmailAddress())) {
							mailIds.add(reqCreatorUser.getEmailAddress());
						}
					}

					List<KaleoTaskInstanceToken> kaleoTaskListReq = fetchKaleoDetails(
							contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DeptAppReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskListReq = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCreatorReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskListReq = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskListReq = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_8 +
					// prevUserName
					// + StringPool.PERIOD;
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_CLOSED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_CLOSED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });

					mailSubject = "Publishing Request " + reqID + " is Closed";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						if (Validator.isNotNull(senderUserIds) && senderUserIds.size() > 0) {
							JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
									entryType);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
									companyId);
							payloadJSON.put(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
									classPk);
							payloadJSON.put(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
									Content_Requestor.class.getName());
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
									groupID);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG,
									mailBody);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
									String.valueOf(userId));
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
									RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

							for (long senderUserId : senderUserIds) {
								RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(
										Long.parseLong(companyId), userId, senderUserId, payloadJSON.toString(),
										Boolean.TRUE);
							}
						}
					}
				}

			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - Urgent Case - when ContentMaker Closing - To All
	// involved users
	// USING IN REQUESTING WORKFLOW
	public static void approvingByContentMaker(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		User prevUser = null;
		User reqCreatorUser = null;
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = fetchContentRequest(Long.parseLong(classPk));

				if (Validator.isNotNull(contentRequestor)) {
					reqID = contentRequestor.getRequestorId();

					if (Validator.isNotNull(userId) && userId > 0) {
						prevUser = UserLocalServiceUtil.getUser(userId);
						prevUserName = prevUser.getFullName();
					}

					// send to asset creator
					if (Validator.isNotNull(contentRequestor.getUserId()) && contentRequestor.getUserId() > 0) {
						reqCreatorUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
						if (!senderUserIds.contains(reqCreatorUser.getUserId())) {
							senderUserIds.add(reqCreatorUser.getUserId());
						}
						if (!mailIds.contains(reqCreatorUser.getEmailAddress())) {
							mailIds.add(reqCreatorUser.getEmailAddress());
						}
					}

					List<KaleoTaskInstanceToken> kaleoTaskListReq = fetchKaleoDetails(
							contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskListReq = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskListReq) && kaleoTaskListReq.size() > 0) {
						KaleoTaskInstanceToken kaleoTaskReq = kaleoTaskListReq.get(0);
						if (Validator.isNotNull(kaleoTaskReq)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTaskReq.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_8 +
					// prevUserName
					// + StringPool.PERIOD;
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_CLOSED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_CLOSED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });

					mailSubject = "Publishing Request " + reqID + " is Closed";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);

					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();
					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						if (Validator.isNotNull(senderUserIds) && senderUserIds.size() > 0) {
							JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
									entryType);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
									companyId);
							payloadJSON.put(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
									classPk);
							payloadJSON.put(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
									Content_Requestor.class.getName());
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
									groupID);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG,
									mailBody);
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
									String.valueOf(userId));
							payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
									RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

							for (long senderUserId : senderUserIds) {
								RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(
										Long.parseLong(companyId), userId, senderUserId, payloadJSON.toString(),
										Boolean.TRUE);
							}
						}
					}
				}

			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Department Approver additionally when notifying
	// Requestor (only email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingAlsoToDeptApp1(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {
			// check configuration to send additional notification to dept app user
			WorkflowGeneralConfiguration workflowGeneralConfiguration = ConfigurationProviderUtil
					.getSystemConfiguration(WorkflowGeneralConfiguration.class);
			boolean sendNotificationFlag = workflowGeneralConfiguration
					.getAdditionalNotificationToDepartmentApproverUser();
			_log.info("HHH ::: Fetching getAdditionalNotificationToDepartmentApproverUser --> " + sendNotificationFlag);

			if (sendNotificationFlag) {
				if (Validator.isNotNull(classPk)) {
					contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
					reqID = contentRequestor.getRequestorId();

					mailSubject = mailSubject + StringPool.DASH + reqID;

					prevUser = UserLocalServiceUtil.getUser(userId);
					prevUserName = prevUser.getFullName();

					if (contentRequestor.getDeptAppId() > 0) {
						senderUser = UserLocalServiceUtil.getUser(contentRequestor.getDeptAppId());
						mailIds.add(senderUser.getEmailAddress());
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
						// reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 +
						// prevUserName
						// + StringPool.PERIOD + "It is assigned to " + contentRequestor.getUserName()
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_REJECTED_BODY, new String[] { reqID,
								contentRequestor.getRequestTitle(), prevUserName, contentRequestor.getUserName() });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_REJECTED_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName,
										contentRequestor.getUserName() });

						mailSubject = "Publishing Request " + reqID + " is Rejected";
					}

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						// JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
						// entryType);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
						// companyId);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
						// classPk);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
						// Content_Requestor.class.getName());
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
						// groupID);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG,
						// mailBody);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
						// String.valueOf(userId));
						//
						// RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
						// userId,
						// senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Department Approver additionally when notifying
	// Requestor (only email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingAlsoToDeptApp2(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {
			// check configuration to send additional notification to dept app user
			WorkflowGeneralConfiguration workflowGeneralConfiguration = ConfigurationProviderUtil
					.getSystemConfiguration(WorkflowGeneralConfiguration.class);
			boolean sendNotificationFlag = workflowGeneralConfiguration
					.getAdditionalNotificationToDepartmentApproverUser();
			_log.info("HHH ::: Fetching getAdditionalNotificationToDepartmentApproverUser --> " + sendNotificationFlag);

			if (sendNotificationFlag) {

				if (Validator.isNotNull(classPk)) {
					contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
					reqID = contentRequestor.getRequestorId();

					// DOC User who has sent the req back to Requestor for closing
					prevUser = UserLocalServiceUtil.getUser(userId);
					prevUserName = prevUser.getFullName();

					if (contentRequestor.getDeptAppId() > 0) {
						senderUser = UserLocalServiceUtil.getUser(contentRequestor.getDeptAppId());
						mailIds.add(senderUser.getEmailAddress());
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
						// reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_10
						// + contentRequestor.getUserName()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_11 +
						// prevUserName
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_12;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_APPROVED_FOR_CHANGE_REQUEST,
								new String[] { reqID, contentRequestor.getRequestTitle(),
										contentRequestor.getUserName(), prevUserName });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_APPROVED_FOR_CHANGE_REQUEST,
								new String[] { reqID, contentRequestor.getRequestTitle(),
										contentRequestor.getUserName(), prevUserName });
						mailSubject = "Publishing Request " + reqID + " is Assigned";

					}

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						// JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
						// entryType);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
						// companyId);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
						// classPk);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
						// Content_Requestor.class.getName());
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
						// groupID);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG,
						// mailBody);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
						// String.valueOf(userId));
						//
						// RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
						// userId,
						// senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Department Approver additionally when notifying
	// Requestor (only email)
	// USING IN REQUESTING WORKFLOW
	public static void sendingAlsoToDeptApp3(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {
			// check configuration to send additional notification to dept app user
			WorkflowGeneralConfiguration workflowGeneralConfiguration = ConfigurationProviderUtil
					.getSystemConfiguration(WorkflowGeneralConfiguration.class);
			boolean sendNotificationFlag = workflowGeneralConfiguration
					.getAdditionalNotificationToDepartmentApproverUser();
			_log.info("HHH ::: Fetching getAdditionalNotificationToDepartmentApproverUser --> " + sendNotificationFlag);

			if (sendNotificationFlag) {
				if (Validator.isNotNull(classPk)) {
					contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
					reqID = contentRequestor.getRequestorId();

					prevUser = UserLocalServiceUtil.getUser(userId);
					prevUserName = prevUser.getFullName();

					if (contentRequestor.getDeptAppId() > 0) {
						senderUser = UserLocalServiceUtil.getUser(contentRequestor.getDeptAppId());
						mailIds.add(senderUser.getEmailAddress());
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
						// reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_13 +
						// prevUserName
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_14
						// + contentRequestor.getUserName() + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_RESOLVED_BODY, new String[] { reqID,
								contentRequestor.getRequestTitle(), prevUserName, contentRequestor.getUserName() });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_RESOLVED_BODY,
								new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName,
										contentRequestor.getUserName() });

						mailSubject = "Publishing Request " + reqID + " is Resolved";
					}

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK) + "?requestId="
							+ contentRequestor.getContentRequestorId();

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}

						// JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
						// entryType);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
						// companyId);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
						// classPk);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
						// Content_Requestor.class.getName());
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
						// groupID);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG,
						// mailBody);
						// payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
						// String.valueOf(userId));
						//
						// RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
						// userId,
						// senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Asset Creator when Request is resolved (email + dxp)
	// USING IN REQUESTING WORKFLOW
	public static void resolvedNotifyToAssetCreator(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
				reqID = contentRequestor.getRequestorId();

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				if (contentRequestor.getUserId() > 0) {
					senderUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
					mailIds.add(senderUser.getEmailAddress());

					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_13 +
					// prevUserName
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_15;

					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_RESOLVED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "you" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_RESOLVED_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, HINDI_YOU });

					mailSubject = "Publishing Request " + reqID + " is Resolved";
				}

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK)
						+ "?requestId=" + contentRequestor.getContentRequestorId();

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
					}

					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
							contentRequestor.getContentRequestorId());

					RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId), userId,
							senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Task Assignee when Assignment
	// USING IN REQUESTING WORKFLOW
	public static void assignmentNotifyForReq(String classPk, String companyId, String groupID, Long userId,
			String entryType) {

		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;		
		
		List<String> mailIds = new ArrayList<>();
		User prevUser = null;
		List<User> roleUsers = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
				reqID = contentRequestor.getRequestorId();

				if (contentRequestor.getContentRequestorId() > 0) {
					DynamicQuery dq = KaleoTaskInstanceTokenLocalServiceUtil.dynamicQuery();
					dq.add(RestrictionsFactoryUtil.eq(
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_CLASSPK,
							contentRequestor.getContentRequestorId()));
					dq.add(RestrictionsFactoryUtil
							.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_COMPLETED, Boolean.FALSE));
					dq.add(RestrictionsFactoryUtil.eq("className", Content_Requestor.class.getName()));

					List<KaleoTaskInstanceToken> kaleoTaskInstanceTokenList = KaleoTaskInstanceTokenLocalServiceUtil
							.dynamicQuery(dq);

					if (kaleoTaskInstanceTokenList != null) {
						for (KaleoTaskInstanceToken kaleoTaskInstanceToken : kaleoTaskInstanceTokenList) {

							DynamicQuery dq2 = KaleoTaskAssignmentInstanceLocalServiceUtil.dynamicQuery();
							dq2.add(RestrictionsFactoryUtil.eq(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_KALEO_TASK_INSTANCE_TOKEN_ID,
									kaleoTaskInstanceToken.getKaleoTaskInstanceTokenId()));

							List<KaleoTaskAssignmentInstance> kaleoTaskAssignmentInstanceList = KaleoTaskAssignmentInstanceLocalServiceUtil
									.dynamicQuery(dq2);
							if (Validator.isNotNull(kaleoTaskAssignmentInstanceList)
									&& !kaleoTaskAssignmentInstanceList.isEmpty()) {
								KaleoTaskAssignmentInstance kaleoTaskAssignmentInstance = kaleoTaskAssignmentInstanceList
										.get(0);
								if (kaleoTaskAssignmentInstance.getAssigneeClassName().equals(User.class.getName())) {
									
									User assigneeUser = UserLocalServiceUtil
											.getUser(kaleoTaskAssignmentInstance.getAssigneeClassPK());
									if (!senderUserIds.contains(assigneeUser.getUserId())) {
										senderUserIds.add(assigneeUser.getUserId());
									}
									if (!mailIds.contains(assigneeUser.getEmailAddress())) {
										mailIds.add(assigneeUser.getEmailAddress());
									}

								} else if (kaleoTaskAssignmentInstance.getAssigneeClassName()
										.equals(Role.class.getName())) {								
									
									roleUsers = UserLocalServiceUtil
											.getRoleUsers(kaleoTaskAssignmentInstance.getAssigneeClassPK());
									for (User roleUser : roleUsers) {
										if (!mailIds.contains(roleUser.getEmailAddress())) {
											mailIds.add(roleUser.getEmailAddress());
										}
										if (!senderUserIds.contains(roleUser.getUserId())) {
											senderUserIds.add(roleUser.getUserId());
										}
									}
								}

								prevUser = UserLocalServiceUtil.getUser(kaleoTaskAssignmentInstance.getUserId());
								prevUserName = prevUser.getFullName();
							}
						}
					}
				}

				String mailLink = PropsUtil.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK)
						+ "?requestId=" + contentRequestor.getContentRequestorId();

				Role requestorRole = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_REQUESTOR);
				
				if (!contentRequestor.getIsEdited() && Validator.isNotNull(requestorRole) && UserLocalServiceUtil.hasRoleUser(requestorRole.getRoleId(),prevUser.getUserId())) {
					String assigneeUsrName = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER.replace("Content","PwC");
					if(senderUserIds.size() == 1) {
						long assigneeUserId = senderUserIds.get(0);
						User assigneeUser = UserLocalServiceUtil.fetchUser(assigneeUserId);
						assigneeUsrName = assigneeUser.getFullName();
					}
					
					String createdMailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_CREATED_INITIATE_TEMPLATE_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), assigneeUsrName });

					String createdHindiMailBody = LanguageUtil.format(HINDI_LOCALE,
							RBI_REQUEST_CREATED_INITIATE_TEMPLATE_BODY,
							new String[] { reqID, contentRequestor.getRequestTitle(), assigneeUsrName });

					String createdMailSubject = "Publishing Request " + reqID + " is Created";
					sendEmail(createdMailSubject, createdMailBody, createdHindiMailBody, mailLink, prevUser.getEmailAddress());
					
					
					JSONObject requestorPayloadJSON = JSONFactoryUtil.createJSONObject();
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, createdMailBody);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
					requestorPayloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
							contentRequestor.getContentRequestorId());

						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, prevUser.getUserId(), requestorPayloadJSON.toString(), Boolean.FALSE);

				}

				// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
				// reqID
				// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
				// + contentRequestor.getRequestTitle()
				// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_16 +
				// prevUserName
				// + StringPool.PERIOD;
				//
			

				mailBody = LanguageUtil.format(ENGLISH_LOCALE, "rbi.request.of.request.workflow.assigned.to.user.body",
						new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });
				_log.info("============assignmentNotifyForReq=============="+mailBody);
				hindiMailBody = LanguageUtil.format(HINDI_LOCALE,
						"rbi.request.of.request.workflow.assigned.to.user.body",
						new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName });

				mailSubject = "Publishing Request " + reqID + " is Assigned";

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				_log.info("============assignmentNotifyForReq=============="+mailIds.toString());
				

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if(!(prevUser.getEmailAddress().equals(email))) {
							if(!UserLocalServiceUtil.hasRoleUser(requestorRole.getRoleId(),prevUser.getUserId())) {
								sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
							}
						}
						_log.info("============assignmentNotifyForReq=============="+email);
					}
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
							contentRequestor.getContentRequestorId());

					for (long senderUserId : senderUserIds) {
						//if(contentRequestor.getModifiedUserId() != contentRequestor.getDeptAppId()) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.FALSE);
						//}		
					}
				}
			}
		} catch (NumberFormatException | PortalException  e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Requestor when rejecting Request
	// USING IN REQUESTING WORKFLOW
	public static void rejectNotifyToRequestor(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
				reqID = contentRequestor.getRequestorId();
				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				if (contentRequestor.getUserId() > 0) {
					senderUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
					mailIds.add(senderUser.getEmailAddress());

					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 +
					// prevUserName
					//// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_7;
					// + StringPool.PERIOD + "It is assigned to " + contentRequestor.getUserName() +
					// StringPool.PERIOD;
					//
					// TODO: Need to verify with BA
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_REJECTED_BODY, new String[] { reqID,
							contentRequestor.getRequestTitle(), prevUserName, contentRequestor.getUserName() });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_REJECTED_BODY, new String[] { reqID,
							contentRequestor.getRequestTitle(), prevUserName, contentRequestor.getUserName() });

					mailSubject = "Publishing Request " + reqID + " is Rejected";
				}

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);

				String mailLink = PropsUtil.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK)
						+ "?requestId=" + contentRequestor.getContentRequestorId();

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
					}

					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
							contentRequestor.getContentRequestorId());

					RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId), userId,
							senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - From DeptApp to Content Maker
	// USING IN REQUESTING WORKFLOW
	public static void sendingDeptAppToCreator(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		User prevUser = null;
		Role roleContMaker = null;
		List<User> userListContMaker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {
				contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
				reqID = contentRequestor.getRequestorId();

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				// sending to Content Maker role
				roleContMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
				userListContMaker = UserLocalServiceUtil.getRoleUsers(roleContMaker.getRoleId());
				for (User userContMaker : userListContMaker) {
					if (!mailIds.contains(userContMaker.getEmailAddress())) {
						mailIds.add(userContMaker.getEmailAddress());
					}
					if (!senderUserIds.contains(userContMaker.getUserId())) {
						senderUserIds.add(userContMaker.getUserId());
					}
				}

				// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
				// reqID
				// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
				// + contentRequestor.getRequestTitle()
				// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_19 +
				// prevUserName
				// + StringPool.PERIOD + "It is assigned to Content Maker.";
				mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_APPROVED_BODY,
						new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });
				hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_APPROVED_BODY,
						new String[] { reqID, contentRequestor.getRequestTitle(), prevUserName, "Content Maker" });

				mailSubject = "Publishing Request " + reqID + " is Approved";

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);

				String mailLink = PropsUtil.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK)
						+ "?requestId=" + contentRequestor.getContentRequestorId();

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
					}

					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						_log.info("DEBUG:::Sender userID::::::::::::::"+senderUserId);

						_log.info("DEBUG:::payloadJSON::::::::::::::"+payloadJSON);

						_log.info("DEBUG:::userId::::::::::::::"+userId);

						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Requesting Workflow - To Asset Creator when closing Request (email + dxp)
	// USING IN REQUESTING WORKFLOW
	public static void closeNotifyToAssetCreator(String classPk, String companyId, String groupID, Long userId,
			String entryType) {
        if (_log.isInfoEnabled()) { _log.info("closeNotifyToAssetCreator() start"); }

		Content_Requestor contentRequestor = null;
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		User senderUser = null;
		User prevUser = null;
		try {

			if (Validator.isNotNull(classPk)) {
				contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(Long.parseLong(classPk));
				reqID = contentRequestor.getRequestorId();

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				if (contentRequestor.getUserId() > 0) {
					senderUser = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
					mailIds.add(senderUser.getEmailAddress());

					// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_1 +
					// reqID
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_16 +
					// prevUserName
					// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_12;
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_APPROVED_FOR_CHANGE_REQUEST,
							new String[] { reqID, contentRequestor.getRequestTitle(), "you", prevUserName });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_REQUEST_APPROVED_FOR_CHANGE_REQUEST,
							new String[] { reqID, contentRequestor.getRequestTitle(), HINDI_YOU, prevUserName });

					mailSubject = "Publishing Request " + reqID + " is Assigned";

				}
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_REQ_MAIL_LINK)
						+ "?requestId=" + contentRequestor.getContentRequestorId();

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
					}

					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.CURRENT_URL,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VIEW_REQ_LINK_QA);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.REQUEST_ID,
							contentRequestor.getContentRequestorId());

					RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId), userId,
							senderUser.getUserId(), payloadJSON.toString(), Boolean.FALSE);
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("closeNotifyToAssetCreator() completed"); }
}

	// ContentFile(Same) Content Publishing Workflow & Content-only Workflow - To
	// Publisher
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendingContentToPublisher(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		// String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds = new ArrayList<>();
		long fileEntryId = 0;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		ExpandoColumn expandoColumnFileId = null;
		ExpandoValue expandoValueFileId = null;
		long tableIdFileId = 0;
		long columnIdFileId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role rolePubl = null;
		List<User> userListPubl = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);

				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());

				reqID = expandoValueReqId.getData();

				expandoColumnFileId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_FILEID);

				if (Validator.isNotNull(expandoColumnFileId)) {
					tableIdFileId = expandoColumnFileId.getTableId();
					columnIdFileId = expandoColumnFileId.getColumnId();
					expandoValueFileId = ExpandoValueLocalServiceUtil.getValue(tableIdFileId, columnIdFileId,
							journalArticle.getId());

					if (Validator.isNotNull(expandoValueFileId)
							&& !StringPool.BLANK.equals(expandoValueFileId.getData())) {
						fileEntryId = Long.parseLong(expandoValueFileId.getData());
					}
				}

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				// sending to Publisher role
				rolePubl = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_PUBLISHER);
				userListPubl = UserLocalServiceUtil.getRoleUsers(rolePubl.getRoleId());
				for (User userPubl : userListPubl) {
					if (!mailIds.contains(userPubl.getEmailAddress())) {
						mailIds.add(userPubl.getEmailAddress());
					}
					if (!senderUserIds.contains(userPubl.getUserId())) {
						senderUserIds.add(userPubl.getUserId());
					}
				}

				comments = getcomments(classPk, companyId);
				if(StringPool.BLANK.equals(comments)) {
					comments = StringPool.DASH;	
				}
				if (fileEntryId > 0 && fileEntryId != 12345) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Publisher" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Publisher" });

					msgBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED_WITHOUT_COMMENT,
							new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
									prevUserName, "Publisher" });
				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,comments, "Publisher" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,comments, "Publisher" });
					
					msgBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED_WITHOUT_COMMENT,
							new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
									prevUserName, "Publisher" });

				}

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Approved";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// ContentFile(Same) Content Workflow & ContentFile(Different) Content Workflow
	// & Content-only Workflow - To all involved user
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void approvingByPublisher(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
        if (_log.isInfoEnabled()) { _log.info("approvingByPublisher() start"); }

		JournalArticle journalArticle = null;
		long journalArticleClassPK = 0;
		String reqID = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;
		String action = StringPool.BLANK;
		String displayDate = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		long fileEntryId = 0;
		long fileVersionId = 0;
		long articleId = 0;
		String transLangStr = StringPool.BLANK;
		DLFileEntry dlFileEntry = null;
		DLFileVersion version = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		ExpandoColumn expandoColumnFileId = null;
		ExpandoValue expandoValueFileId = null;
		long tableIdFileId = 0;
		long columnIdFileId = 0;
		Content_Requestor contentRequestor = null;
		User requestor = null;
		List<AssetVocabulary> schdlAssetVocabularies = new ArrayList<>();
		AssetVocabulary schdlAssetVocabulary = null;
		List<AssetCategory> schdlAssetCategories = new ArrayList<>();
		List<AssetVocabulary> langAssetVocabularies = new ArrayList<>();
		AssetVocabulary langAssetVocabulary = null;
		List<AssetCategory> langAssetCategories = new ArrayList<>();
		AssetEntry assetEntry = null;
		List<AssetEntryAssetCategoryRel> assetEntryAssetCategoryRels = new ArrayList<>();
		StringBuffer transLangs = new StringBuffer();
		try {

			if (Validator.isNotNull(classPk)) {
				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));
				articleId = Long.parseLong(journalArticle.getArticleId());
				_log.info("-------------------articleId-------------------------" + articleId);

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);

				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());

				reqID = expandoValueReqId.getData();

				expandoColumnFileId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_FILEID);

				if (Validator.isNotNull(expandoColumnFileId)) {
					tableIdFileId = expandoColumnFileId.getTableId();
					columnIdFileId = expandoColumnFileId.getColumnId();
					expandoValueFileId = ExpandoValueLocalServiceUtil.getValue(tableIdFileId, columnIdFileId,
							journalArticle.getId());

					if (Validator.isNotNull(expandoValueFileId)
							&& !StringPool.BLANK.equals(expandoValueFileId.getData())
							&& !expandoValueFileId.equals("12345")) {
						fileEntryId = Long.parseLong(expandoValueFileId.getData());
					}
				}

				if (fileEntryId > 0 && fileEntryId != 12345) {
					dlFileEntry = DLFileEntryLocalServiceUtil.fetchDLFileEntry(fileEntryId);
					if(Validator.isNotNull(dlFileEntry)) {
						version = dlFileEntry.getFileVersion();
						fileVersionId = version.getFileVersionId();
					}
				}
				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				displayDate = DateUtil.getDate(journalArticle.getDisplayDate(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DD_MM_YYYY_HH_MM_SS, null);

				requestor = UserLocalServiceUtil.getUser(contentRequestor.getUserId());
				if (!senderUserIds.contains(requestor.getUserId())) {
					senderUserIds.add(requestor.getUserId());
				}
				if (!mailIds.contains(requestor.getEmailAddress())) {
					mailIds.add(requestor.getEmailAddress());
				}

				if (journalArticle.getVersion() == 1) {
					journalArticleClassPK = journalArticle.getResourcePrimKey();
				} else {
					if (journalArticle.getStatus() == 1 || journalArticle.getStatus() == 7) {
						journalArticleClassPK = journalArticle.getId();
					} else if (journalArticle.getStatus() == 0) {
						journalArticleClassPK = journalArticle.getResourcePrimKey();
					}
				}

				DynamicQuery dqSchdl = AssetVocabularyLocalServiceUtil.dynamicQuery();
				dqSchdl.add(RestrictionsFactoryUtil.ilike(
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_NAME,
						StringPool.PERCENT
								+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_CONT_PUBL_TYPE
								+ StringPool.PERCENT));
				schdlAssetVocabularies = AssetVocabularyLocalServiceUtil.dynamicQuery(dqSchdl);
				if (schdlAssetVocabularies.size() > 0) {
					schdlAssetVocabulary = schdlAssetVocabularies.get(0);
				}

				schdlAssetCategories = AssetCategoryLocalServiceUtil
						.getVocabularyCategories(schdlAssetVocabulary.getVocabularyId(), -1, -1, null);

				assetEntry = AssetEntryLocalServiceUtil.getEntry(JournalArticle.class.getName(), journalArticleClassPK);
				assetEntryAssetCategoryRels = AssetEntryAssetCategoryRelLocalServiceUtil
						.getAssetEntryAssetCategoryRelsByAssetEntryId(assetEntry.getEntryId());

				for (AssetEntryAssetCategoryRel assetEntryAssetCategoryRel : assetEntryAssetCategoryRels) {
					long assetCategoryId = assetEntryAssetCategoryRel.getAssetCategoryId();
					if (schdlAssetCategories.size() > 0) {
						for (AssetCategory category : schdlAssetCategories) {
							if (category.getCategoryId() == assetCategoryId) {
								action = category.getName();
							}
						}
					}
				}
				_log.info("-------------------action-------------------------" + action);
				List<KaleoTaskInstanceToken> kaleoTaskList = fetchKaleoDetails(contentRequestor.getContentRequestorId(),
						Boolean.TRUE, RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DeptAppReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				kaleoTaskList = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCreatorReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				kaleoTaskList = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				kaleoTaskList = fetchKaleoDetails(contentRequestor.getContentRequestorId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				if (fileVersionId > 0 && Validator.isNotNull(dlFileEntry)) {

					kaleoTaskList = fetchKaleoDetails(fileVersionId, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ReviewedByContentMaker_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else {
						User completionUser = UserLocalServiceUtil.getUser(dlFileEntry.getUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}

					kaleoTaskList = fetchKaleoDetails(fileVersionId, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskList = fetchKaleoDetails(fileVersionId, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCMakerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					kaleoTaskList = fetchKaleoDetails(fileVersionId, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCCheckerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}
				}

				kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				} else if (!Validator.isBlank(action)) {

					List<JournalArticle> journalArticleList = null;
					long newClassPk = 0;
					DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
					dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
					dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
					journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

					if (Validator.isNotNull(journalArticleList)) {
						newClassPk = journalArticleList.get(0).getId();
					}
					kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else {
						// in case of Content-only && Content+File--Different (Content case) --latest
						// content maker or asset creator
						User completionUser = UserLocalServiceUtil.getUser(journalArticle.getStatusByUserId());

						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}

				} else {
					// in case of Content-only && Content+File--Different (Content case) --latest
					// content maker or asset creator
					User completionUser = UserLocalServiceUtil.getUser(journalArticle.getStatusByUserId());

					if (!senderUserIds.contains(completionUser.getUserId())) {
						senderUserIds.add(completionUser.getUserId());
					}
					if (!mailIds.contains(completionUser.getEmailAddress())) {
						mailIds.add(completionUser.getEmailAddress());
					}
				}

				kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				} else if (!Validator.isBlank(action)) {

					List<JournalArticle> journalArticleList = null;
					long newClassPk = 0;
					DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
					dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
					dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
					journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

					if (Validator.isNotNull(journalArticleList)) {
						newClassPk = journalArticleList.get(0).getId();
					}

					kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

				}

				kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

						if (!senderUserIds.contains(completionUser.getUserId())) {
							senderUserIds.add(completionUser.getUserId());
						}
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				} else if (!Validator.isBlank(action)) {

					List<JournalArticle> journalArticleList = null;
					long newClassPk = 0;
					DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
					dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
					dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
					journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

					if (Validator.isNotNull(journalArticleList)) {
						newClassPk = journalArticleList.get(0).getId();
					}

					kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_PublisherReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

				}

				// in case of Content-only && Content+File--Different (Content case) -- also
				// notifying latest Doc maker,doc checker,
				// && Content+File--Different (Content case) -> Content Maker and Content
				// Checker second review
				if (fileEntryId == 0) {

					kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCMakerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else if (!Validator.isBlank(action)) {

						List<JournalArticle> journalArticleList = null;
						long newClassPk = 0;
						DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
						dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
						dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
						journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

						if (Validator.isNotNull(journalArticleList)) {
							newClassPk = journalArticleList.get(0).getId();
						}

						kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
								RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCMakerReview_TASKNAME);

						if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
							KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
							if (Validator.isNotNull(kaleoTask)) {
								User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

								if (!senderUserIds.contains(completionUser.getUserId())) {
									senderUserIds.add(completionUser.getUserId());
								}
								if (!mailIds.contains(completionUser.getEmailAddress())) {
									mailIds.add(completionUser.getEmailAddress());
								}
							}
						}

					}

					kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCCheckerReview_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else if (!Validator.isBlank(action)) {

						List<JournalArticle> journalArticleList = null;
						long newClassPk = 0;
						DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
						dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
						dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
						journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

						if (Validator.isNotNull(journalArticleList)) {
							newClassPk = journalArticleList.get(0).getId();
						}

						kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
								RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCCheckerReview_TASKNAME);

						if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
							KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
							if (Validator.isNotNull(kaleoTask)) {
								User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

								if (!senderUserIds.contains(completionUser.getUserId())) {
									senderUserIds.add(completionUser.getUserId());
								}
								if (!mailIds.contains(completionUser.getEmailAddress())) {
									mailIds.add(completionUser.getEmailAddress());
								}
							}
						}
					}

					kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview2_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else if (!Validator.isBlank(action)) {

						List<JournalArticle> journalArticleList = null;
						long newClassPk = 0;
						DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
						dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
						dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
						journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

						if (Validator.isNotNull(journalArticleList)) {
							newClassPk = journalArticleList.get(0).getId();
						}

						kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
								RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview2_TASKNAME);

						if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
							KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
							if (Validator.isNotNull(kaleoTask)) {
								User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

								if (!senderUserIds.contains(completionUser.getUserId())) {
									senderUserIds.add(completionUser.getUserId());
								}
								if (!mailIds.contains(completionUser.getEmailAddress())) {
									mailIds.add(completionUser.getEmailAddress());
								}
							}
						}

					}

					kaleoTaskList = fetchKaleoDetails(Long.parseLong(classPk), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview2_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
						if (Validator.isNotNull(kaleoTask)) {
							User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

							if (!senderUserIds.contains(completionUser.getUserId())) {
								senderUserIds.add(completionUser.getUserId());
							}
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					} else if (!Validator.isBlank(action)) {

						List<JournalArticle> journalArticleList = null;
						long newClassPk = 0;
						DynamicQuery dynamicQueryArticle = JournalArticleLocalServiceUtil.dynamicQuery();
						dynamicQueryArticle.add(RestrictionsFactoryUtil.eq("articleId", String.valueOf(articleId)));
						dynamicQueryArticle.addOrder(OrderFactoryUtil.asc("version"));
						journalArticleList = JournalArticleLocalServiceUtil.dynamicQuery(dynamicQueryArticle);

						if (Validator.isNotNull(journalArticleList)) {
							newClassPk = journalArticleList.get(0).getId();
						}

						kaleoTaskList = fetchKaleoDetails(newClassPk, Boolean.TRUE,
								RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview2_TASKNAME);

						if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
							KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
							if (Validator.isNotNull(kaleoTask)) {
								User completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());

								if (!senderUserIds.contains(completionUser.getUserId())) {
									senderUserIds.add(completionUser.getUserId());
								}
								if (!mailIds.contains(completionUser.getEmailAddress())) {
									mailIds.add(completionUser.getEmailAddress());
								}
							}
						}
					}

				}
				
				AssetVocabulary reqTypeAssetVocabulary = null;
				String reqType = StringPool.BLANK;
				DynamicQuery dqRequestType = AssetVocabularyLocalServiceUtil.dynamicQuery();
				dqRequestType.add(RestrictionsFactoryUtil
						.ilike(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_NAME,
								StringPool.PERCENT
										+ "Request Type"
										+ StringPool.PERCENT));
				List<AssetVocabulary> reqTypeAssetVocabularies = AssetVocabularyLocalServiceUtil
						.dynamicQuery(dqRequestType);
				if (!reqTypeAssetVocabularies.isEmpty()) {
					reqTypeAssetVocabulary = reqTypeAssetVocabularies.get(0);
				}
				List<AssetCategory> reqTypeAssetCategories = AssetCategoryLocalServiceUtil.getVocabularyCategories(
						reqTypeAssetVocabulary.getVocabularyId(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);

				for (AssetEntryAssetCategoryRel assetEntryAssetCategoryRel : assetEntryAssetCategoryRels) {
					long assetCategoryId = assetEntryAssetCategoryRel.getAssetCategoryId();

					if (!reqTypeAssetCategories.isEmpty()) {
						for (AssetCategory category : reqTypeAssetCategories) {
							if (category.getCategoryId() == assetCategoryId) {
								reqType = category.getName();
							}
						}
					}
				}
				if("Correction".equals(reqType)) {
					
					_log.info("----------------- Inside Correction ReqType -------------------------");
					DynamicQuery dqLang = AssetVocabularyLocalServiceUtil.dynamicQuery();
					dqLang.add(RestrictionsFactoryUtil
							.ilike(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_NAME,
									StringPool.PERCENT
											+ "Corrected Language"
											+ StringPool.PERCENT));
					langAssetVocabularies = AssetVocabularyLocalServiceUtil.dynamicQuery(dqLang);
					if (!langAssetVocabularies.isEmpty()) {
						langAssetVocabulary = langAssetVocabularies.get(0);
					}
					langAssetCategories = AssetCategoryLocalServiceUtil
							.getVocabularyCategories(langAssetVocabulary.getVocabularyId(), -1, -1, null);
	
					for (AssetEntryAssetCategoryRel assetEntryAssetCategoryRel : assetEntryAssetCategoryRels) {
						long assetCategoryId = assetEntryAssetCategoryRel.getAssetCategoryId();
	
						if (!langAssetCategories.isEmpty()) {
							for (AssetCategory category : langAssetCategories) {
								if (category.getCategoryId() == assetCategoryId) {
									_log.info("----------------- Corrected Lang -------------------------" +category.getName());
									transLangs.append(category.getName());
									transLangs.append(StringPool.COMMA);
								}
							}
						}
					}

				} else {
					
					_log.info("----------------- Else Correction ReqType -------------------------");
					
					DynamicQuery dqLang = AssetVocabularyLocalServiceUtil.dynamicQuery();
					dqLang.add(RestrictionsFactoryUtil
							.ilike(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_NAME,
									StringPool.PERCENT
											+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_TRNSLTD_LANG
											+ StringPool.PERCENT));
					langAssetVocabularies = AssetVocabularyLocalServiceUtil.dynamicQuery(dqLang);
					if (!langAssetVocabularies.isEmpty()) {
						langAssetVocabulary = langAssetVocabularies.get(0);
					}
					langAssetCategories = AssetCategoryLocalServiceUtil
							.getVocabularyCategories(langAssetVocabulary.getVocabularyId(), -1, -1, null);
	
					for (AssetEntryAssetCategoryRel assetEntryAssetCategoryRel : assetEntryAssetCategoryRels) {
						long assetCategoryId = assetEntryAssetCategoryRel.getAssetCategoryId();
	
						if (!langAssetCategories.isEmpty()) {
							for (AssetCategory category : langAssetCategories) {
								if (category.getCategoryId() == assetCategoryId) {
									transLangs.append(category.getName());
									transLangs.append(StringPool.COMMA);
								}
							}
						}
					}
					
				}
				
				_log.info("Translated Language : " + transLangs.toString());
				if ((StringPool.BLANK).equals(transLangs.toString())) {
					transLangStr = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_CMMNT_1;
				} else {
					transLangStr = transLangs.toString();
					transLangStr = (transLangStr.substring(0, transLangStr.length() - 1));
					transLangStr = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_CMMNT_1
							+ StringPool.COMMA + transLangStr;
				}

				User user = WorkflowPermissionCheckerUtil.fetchPermissionCheckerUser(journalArticle.getCompanyId());
				PermissionChecker permissionChecker;
				permissionChecker = PermissionCheckerFactoryUtil.create(user);
				PermissionThreadLocal.setPermissionChecker(permissionChecker);

				String publishedLang = (String) journalArticle.getExpandoBridge().getAttribute(RbiWorkflowEmailNotificationPortletKeys.JOURNAL_ARTICLE_CUSTOM_FIELD_PUBLISHED_LANGUAGE);
				String[] translatedLangArray = transLangStr.split(StringPool.COMMA);
        		String[] publishedLangArray = publishedLang.split(StringPool.COMMA);
        		
				if (Validator.isNotNull(publishedLang) && !Validator.isBlank(publishedLang)) {
					Set<String> publishedLangSet = new HashSet<>(Arrays.asList(publishedLangArray));

					List<String> resultLangList = new ArrayList<>();
					for (String lang : translatedLangArray) {
						if (!publishedLangSet.contains(lang)) {
							resultLangList.add(lang);
						}
					}
					transLangStr = String.join(StringPool.COMMA, resultLangList);
				}

				mailSubject = "Publishing id " + journalArticle.getArticleId();

				if (fileEntryId > 0 && fileEntryId != 12345) {
					if ((StringPool.BLANK).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// fileEntryId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_24 +
						// transLangStr
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_23 +
						// displayDate
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						if(mailBody.equals(RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING)) {
							mailBody = String.format(DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_EN, String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
									transLangStr, getDate(displayDate), getTime(displayDate));
							hindiMailBody = String.format(DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_HI, String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) );
							
						}
						mailSubject = mailSubject + " is Published";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_SCHEDULE).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// fileEntryId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_25 +
						// transLangStr
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_23 +
						// displayDate
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_SCHEDULED_FOR_PULISHING,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_SCHEDULED_FOR_PULISHING,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						mailSubject = mailSubject + " is scheduled for publishing";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_RE_SCHEDULE).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// fileEntryId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_26 +
						// transLangStr
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_23 +
						// displayDate
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_RESCHEDULE,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, displayDate });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_RESCHEDULE,
								new String[] { String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, displayDate });

						mailSubject = mailSubject + " is rescheduled for publishing";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_HOLD).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// fileEntryId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_27;
						Calendar calendar = Calendar.getInstance();
						calendar.set(2099, 11, 31);
						calendar.set(Calendar.HOUR, 0);
						calendar.set(Calendar.MINUTE, 0);
						calendar.set(Calendar.SECOND, 0);
						journalArticle.setDisplayDate(calendar.getTime());
						_log.info("==================Updating display date=================" + journalArticle);
						JournalArticleLocalServiceUtil.updateJournalArticle(journalArticle);
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_HOLD, new String[] {
								String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle() });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_HOLD, new String[] {
								String.valueOf(fileEntryId), reqID, contentRequestor.getRequestTitle() });

						mailSubject = mailSubject + " is put on hold";

					}
				} else {

					if ((StringPool.BLANK).equals(action)) {
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						if(mailBody.equals(RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING)) {
							mailBody = String.format(DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_EN, String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
									transLangStr, getDate(displayDate), getTime(displayDate));
							hindiMailBody = String.format(DEFAULT_RBI_EMAIL_BODY_IMMEDIATE_PUBLISHING_HI, String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate));
						}
						mailSubject = mailSubject + " is Published";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_SCHEDULE).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// articleId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_25 +
						// transLangStr
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_23 +
						// displayDate
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_SCHEDULED_FOR_PULISHING,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_SCHEDULED_FOR_PULISHING,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, getDate(displayDate), getTime(displayDate) });

						mailSubject = mailSubject + " is scheduled for publishing";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_RE_SCHEDULE).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// articleId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_26 +
						// transLangStr
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_23 +
						// displayDate
						// + StringPool.PERIOD;
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_RESCHEDULE,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, displayDate });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_RESCHEDULE,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle(),
										transLangStr, displayDate });

						mailSubject = mailSubject + " is rescheduled for publishing";

					} else if ((RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_HOLD).equals(action)) {
						// mailBody = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_21 +
						// articleId
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						// + contentRequestor.getRequestTitle()
						// + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_27;
						Calendar calendar = Calendar.getInstance();
						calendar.set(2099, 11, 31);
						calendar.set(Calendar.HOUR, 0);
						calendar.set(Calendar.MINUTE, 0);
						calendar.set(Calendar.SECOND, 0);
						journalArticle.setDisplayDate(calendar.getTime());
						_log.info(
								"==================Updating display date else block=================" + journalArticle);

						JournalArticleLocalServiceUtil.updateJournalArticle(journalArticle);
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_EMAIL_BODY_HOLD,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle() });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_EMAIL_BODY_HOLD,
								new String[] { String.valueOf(articleId), reqID, contentRequestor.getRequestTitle() });

						mailSubject = mailSubject + " is put on hold";

					}
				}

				_log.info("---------------------------------------------------------------------------------");

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);

				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				// Additional mail configuration
				WorkflowPublishNotificationAdditionEmailConfiguration workflowPublishNotificationAdditionEmailConfiguration = ConfigurationProviderUtil
						.getSystemConfiguration(WorkflowPublishNotificationAdditionEmailConfiguration.class);
				String[] additionalMailIds = workflowPublishNotificationAdditionEmailConfiguration
						.getWorkflowPublishNotifiationAddtionEmailList();

				if (Validator.isNotNull(additionalMailIds) && additionalMailIds.length > 0) {
					for (String additionalMailId : additionalMailIds) {
						_log.info("************** additional mail **** :: " + additionalMailId);
						if (!mailIds.contains(additionalMailId)) {
							mailIds.add(additionalMailId);
						}
					}
				}
				_log.info("==================Updating msgBody=================" + mailBody);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, mailBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("approvingByPublisher() completed"); }
}

	// Content-only Workflow && ContentFile (Different) Content Workflow - To DOC
	// Maker(email + dxp) and DOC Checker(email) roles' users
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendingContentToDocMakerChecker(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds1 = new ArrayList<>();
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleDocChecker = null;
		List<User> userListDocChecker = new ArrayList<>();
		Role roleDocMaker = null;
		List<User> userListDocMaker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				// sending to DOC Checker(only email) & DOC Maker(email + dxp) role

				// check configuration to send additional notification to doc checker role
				WorkflowGeneralConfiguration workflowGeneralConfiguration = ConfigurationProviderUtil
						.getSystemConfiguration(WorkflowGeneralConfiguration.class);
				boolean sendDocNotificationFlag = workflowGeneralConfiguration
						.getAdditionalNotificationToDocCheckerRole();
				_log.info("HHH ::: Fetching getAdditionalNotificationToDocCheckerRole --> " + sendDocNotificationFlag);

				if (sendDocNotificationFlag) {
					roleDocChecker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_DOC_CHECKER);
					userListDocChecker = UserLocalServiceUtil.getRoleUsers(roleDocChecker.getRoleId());
					for (User userDocChecker : userListDocChecker) {
						if (!mailIds.contains(userDocChecker.getEmailAddress())) {
							mailIds.add(userDocChecker.getEmailAddress());
						}
					}
				}

				roleDocMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_DOC_MAKER);
				userListDocMaker = UserLocalServiceUtil.getRoleUsers(roleDocMaker.getRoleId());
				for (User userDocMaker : userListDocMaker) {
					if (!mailIds.contains(userDocMaker.getEmailAddress())) {
						mailIds.add(userDocMaker.getEmailAddress());
					}
					if (!senderUserIds1.contains(userDocMaker.getUserId())) {
						senderUserIds1.add(userDocMaker.getUserId());
					}
				}

				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_19 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to DOC
				// Maker.";
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Maker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, StringPool.DASH, "DOC Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "DOC Maker" });

				}

				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Approved";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds1) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// sending to content maker role (email + dxp) for second review (manual
	// intervantion)
	// USING IN FILE-ONLY WORKFLOW
	public static void sendingContentToContentMaker2(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds = new ArrayList<>();
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleContMaker = null;
		List<User> userListContMaker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				roleContMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
				userListContMaker = UserLocalServiceUtil.getRoleUsers(roleContMaker.getRoleId());
				for (User userContMaker : userListContMaker) {
					if (!mailIds.contains(userContMaker.getEmailAddress())) {
						mailIds.add(userContMaker.getEmailAddress());
					}
					if (!senderUserIds.contains(userContMaker.getUserId())) {
						senderUserIds.add(userContMaker.getUserId());
					}
				}
				
				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_19 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to Content
				// Maker.";
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Maker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Maker" });

				}
				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Approved";

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// sending to content checker role for second review (manual intervantion)
	// USING FILE-ONLY WORKFLOW
	public static void sendingContentToContentChecker2(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds = new ArrayList<>();
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleContChecker = null;
		List<User> userListContChecker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				roleContChecker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_CHECKER);
				userListContChecker = UserLocalServiceUtil.getRoleUsers(roleContChecker.getRoleId());
				for (User userContChecker : userListContChecker) {
					if (!mailIds.contains(userContChecker.getEmailAddress())) {
						mailIds.add(userContChecker.getEmailAddress());
					}
					if (!senderUserIds.contains(userContChecker.getUserId())) {
						senderUserIds.add(userContChecker.getUserId());
					}
				}
				
				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_19 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to Content
				// Checker.";
				// mailBody= LanguageUtil.format(ENGLISH_LOCALE,
				// "rbi.workflow.request.approved",new String[] {journalArticle.getArticleId(),
				// reqID,contentRequestor.getRequestTitle(),prevUserName,commentStr,"Content
				// Checker"});
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Checker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Checker" });

				}
				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Approved";

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// To latest
	// Content Maker second reviewer (email) + Content Maker role's all users (dxp)
	// USING FILE-ONLY WORKFLOW
	public static void sendingContentToLatestContentMaker2(String classPk, String companyId, String groupID,
			Long userId, String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		User completionUser = null;
		User prevUser = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		Role roleContentMaker = null;
		List<User> userListroleContentMaker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		String fromMox = StringPool.BLANK;
		ExpandoColumn expandoColumnMox = null;
		ExpandoValue expandoValueMox = null;
		long tableIdMox = 0;
		long columnIdMox = 0;
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				expandoColumnMox = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_ComingFromMox);

				tableIdMox = expandoColumnMox.getTableId();
				columnIdMox = expandoColumnMox.getColumnId();
				expandoValueMox = ExpandoValueLocalServiceUtil.getValue(tableIdMox, columnIdMox,
						journalArticle.getId());

				fromMox = expandoValueMox.getData();

				User user = WorkflowPermissionCheckerUtil.fetchPermissionCheckerUser(journalArticle.getCompanyId());
				PermissionChecker permissionChecker;
				permissionChecker = PermissionCheckerFactoryUtil.create(user);
				PermissionThreadLocal.setPermissionChecker(permissionChecker);

				if (RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_FALSE_STR.equals(fromMox)) {
					expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(
							journalArticle.getCompanyId(), JournalArticle.class.getName(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
					tableIdReqId = expandoColumnReqId.getTableId();
					columnIdReqId = expandoColumnReqId.getColumnId();
					expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
							journalArticle.getId());
					reqID = expandoValueReqId.getData();

					contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

					List<KaleoTaskInstanceToken> kaleoTaskList = fetchKaleoDetails(journalArticle.getId(), Boolean.TRUE,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview2_TASKNAME);

					if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
						KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);

						if (Validator.isNotNull(kaleoTask)) {
							completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
							if (!mailIds.contains(completionUser.getEmailAddress())) {
								mailIds.add(completionUser.getEmailAddress());
							}
						}
					}

					// sending to ContentMaker role
					roleContentMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
					userListroleContentMaker = UserLocalServiceUtil.getRoleUsers(roleContentMaker.getRoleId());
					for (User userContentMaker : userListroleContentMaker) {
						if (!senderUserIds.contains(userContentMaker.getUserId())) {
							senderUserIds.add(userContentMaker.getUserId());
						}
					}

					comments = getcomments(classPk, companyId);
					
					body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
							+ journalArticle.getArticleId()
							+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
							+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
							+ contentRequestor.getRequestTitle()
							+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 + prevUserName;
					//
					// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to Content
					// Maker.";
					if (!StringPool.BLANK.equals(comments)) {
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
								new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
										prevUserName, comments, "Content Maker" });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
								new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
										prevUserName, comments, "Content Maker" });

					} else {
						mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
								new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
										prevUserName,StringPool.DASH, "Content Maker" });
						hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
								new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
										prevUserName,StringPool.DASH, "Content Maker" });

					}
					msgBody = body + StringPool.PERIOD;

					mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Rejected";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							if (!StringPool.BLANK.equals(mailBody)) {
								sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
							}
						}

						// custom dxp notification
						JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
								entryType);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID,
								companyId);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
								classPk);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
								JournalArticle.class.getName());
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID,
								groupID);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
								String.valueOf(userId));
						payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
								RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

						for (long senderUserId : senderUserIds) {
							RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
									userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
						}
					}
				} else if (RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_TRUE_STR.equals(fromMox)) {
					ExpandoValueLocalServiceUtil.addValue(journalArticle.getCompanyId(), JournalArticle.class.getName(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CUSTOM_FIELDS,
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_ComingFromMox,
							journalArticle.getId(), Boolean.FALSE);
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Content-only Workflow && ContentFile (Different) Content Workflow - To DOC
	// Checker(email + dxp) roles' users
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendingContentToDocChecker(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
        if (_log.isInfoEnabled()) { _log.info("sendingContentToDocChecker() start"); }

		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds1 = new ArrayList<>();
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleDocChecker = null;
		List<User> userListDocChecker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				// sending to DOC Checker(email + dxp) role
				roleDocChecker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_DOC_CHECKER);
				userListDocChecker = UserLocalServiceUtil.getRoleUsers(roleDocChecker.getRoleId());
				for (User userDocChecker : userListDocChecker) {
					if (!mailIds.contains(userDocChecker.getEmailAddress())) {
						mailIds.add(userDocChecker.getEmailAddress());
					}
					if (!senderUserIds1.contains(userDocChecker.getUserId())) {
						senderUserIds1.add(userDocChecker.getUserId());
					}
				}

				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_19 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to .";
				msgBody = body + StringPool.PERIOD;
				// mailBody= LanguageUtil.format(ENGLISH_LOCALE,
				// "rbi.workflow.request.approved",new String[] {journalArticle.getArticleId(),
				// reqID,contentRequestor.getRequestTitle(),prevUserName,commentStr,"DOC
				// Checker"});
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Checker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "DOC Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_APPROVED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "DOC Checker" });

				}

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Approved";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds1) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("sendingContentToDocChecker() completed"); }
}

	// USING IN CONTENT-ONLY WORKFLOW
	public static void sendingAssignmentEmailToDocChecker(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleDocChecker = null;
		List<User> userListDocChecker = new ArrayList<>();
		try {
			// check configuration to send additional notification to doc checker role
			WorkflowGeneralConfiguration workflowGeneralConfiguration = ConfigurationProviderUtil
					.getSystemConfiguration(WorkflowGeneralConfiguration.class);
			boolean sendDocNotificationFlag = workflowGeneralConfiguration.getAdditionalNotificationToDocCheckerRole();
			_log.info("HHH ::: Fetching getAdditionalNotificationToDocCheckerRole --> " + sendDocNotificationFlag);

			if (sendDocNotificationFlag) {
				if (Validator.isNotNull(classPk)) {

					journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

					expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(
							journalArticle.getCompanyId(),
							JournalArticle.class.getName(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
					tableIdReqId = expandoColumnReqId.getTableId();
					columnIdReqId = expandoColumnReqId.getColumnId();
					expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
							journalArticle.getId());
					reqID = expandoValueReqId.getData();

					contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

					prevUser = UserLocalServiceUtil.getUser(userId);
					prevUserName = prevUser.getFullName();

					// sending to DOC Checker role
					roleDocChecker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_DOC_CHECKER);
					userListDocChecker = UserLocalServiceUtil.getRoleUsers(roleDocChecker.getRoleId());
					for (User userDocChecker : userListDocChecker) {
						if (!mailIds.contains(userDocChecker.getEmailAddress())) {
							mailIds.add(userDocChecker.getEmailAddress());
						}
					}

					// mailBody = "Workflow for Publishing Request Number " +
					// journalArticle.getArticleId()
					// + " of Request " + reqID +
					// RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					// + contentRequestor.getRequestTitle()
					// + "' has been assigned to DOC Maker by " + prevUserName + StringPool.PERIOD;
					mailBody = LanguageUtil.format(ENGLISH_LOCALE,
							RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									"DOC Maker", prevUserName });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE,
							RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									"DOC Maker", prevUserName });

					mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Assigned";

					if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
					_log.info("mailSubject ::: " + mailSubject);
					String mailLink = PropsUtil
							.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

					if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
						for (String email : mailIds) {
							if (!StringPool.BLANK.equals(mailBody)) {
								sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
							}
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendingAssignmentEmailToContentMaker(String classPk, String companyId, String groupID,
			Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleContentMaker = null;
		List<User> userListContentMaker = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				// sending to ContentMaker role
				roleContentMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
				userListContentMaker = UserLocalServiceUtil.getRoleUsers(roleContentMaker.getRoleId());
				for (User userContentMaker : userListContentMaker) {
					if (!mailIds.contains(userContentMaker.getEmailAddress())) {
						mailIds.add(userContentMaker.getEmailAddress());
					}
				}

				// mailBody = "Workflow for Publishing Request Number " +
				// journalArticle.getArticleId()
				// + " of Request " + reqID +
				// RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
				// + contentRequestor.getRequestTitle()
				// + "' has been assigned to Publisher by " + prevUserName + StringPool.PERIOD;
				mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
						new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
								"Publisher", prevUserName });
				hindiMailBody = LanguageUtil.format(HINDI_LOCALE,
						RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
						new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
								"Publisher", prevUserName });

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Assigned";

				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Content-only Workflow && ContentFile (Different) Content Workflow - To latest
	// Content Maker (email) + Content Maker role's all users (dxp)
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendContentOnlyToLatestContentMaker(String classPk, String companyId, String groupID,
			Long userId, String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		User completionUser = null;
		User prevUser = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		Role roleContentMaker = null;
		List<User> userListroleContentMaker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				List<KaleoTaskInstanceToken> kaleoTaskList = fetchKaleoDetails(journalArticle.getId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentMakerReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);

					if (Validator.isNotNull(kaleoTask)) {
						completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				} else {
					// asset creator
					completionUser = UserLocalServiceUtil.getUser(journalArticle.getUserId());
					if (!mailIds.contains(completionUser.getEmailAddress())) {
						mailIds.add(completionUser.getEmailAddress());
					}
				}

				// sending to ContentMaker role
				roleContentMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_MAKER);
				userListroleContentMaker = UserLocalServiceUtil.getRoleUsers(roleContentMaker.getRoleId());
				for (User userContentMaker : userListroleContentMaker) {
					if (!senderUserIds.contains(userContentMaker.getUserId())) {
						senderUserIds.add(userContentMaker.getUserId());
					}
				}

				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to Content
				// Maker.";
				// mailBody= LanguageUtil.format(ENGLISH_LOCALE,
				// "rbi.workflow.request.rejected",new String[] {
				// journalArticle.getArticleId(),reqID,contentRequestor.getRequestTitle(),prevUserName,commentStr,"Content
				// Maker"});
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Maker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Maker" });

				}

				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Rejected";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId,
								senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Content-only Workflow && ContentFile (Different) Content Workflow - To latest
	// Content Checker (email) + Content Checker role's all user (dxp)
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendContentOnlyToLatestContentChecker(String classPk, String companyId, String groupID,
			Long userId, String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		User completionUser = null;
		User prevUser = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		Role roleContentChecker = null;
		List<User> userListroleContentChecker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				List<KaleoTaskInstanceToken> kaleoTaskList = fetchKaleoDetails(journalArticle.getId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_ContentCheckerReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				// sending to ContentChecker role
				roleContentChecker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_CONETNT_CHECKER);
				userListroleContentChecker = UserLocalServiceUtil.getRoleUsers(roleContentChecker.getRoleId());
				for (User userContentChecker : userListroleContentChecker) {
					if (!senderUserIds.contains(userContentChecker.getUserId())) {
						senderUserIds.add(userContentChecker.getUserId());
					}
				}
				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to Content
				// Checker.";
				// mailBody= LanguageUtil.format(ENGLISH_LOCALE,
				// "rbi.workflow.request.rejected",new String[] {
				// journalArticle.getArticleId(),reqID,contentRequestor.getRequestTitle(),prevUserName,commentStr,"Content
				// Checker"});
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "Content Checker" });
				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Checker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "Content Checker" });
				}
				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Rejected";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId,
								senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}

				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Content-only Workflow && ContentFile (Different) Content Workflow - To latest
	// DOC Maker (email) + DOC Maker role's all users (dxp)
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void sendContentOnlyToLatestDocMaker(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_SUBJECT_CONT_PUBL;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		User completionUser = null;
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		Role roleDocMaker = null;
		List<User> userListroleDocMaker = new ArrayList<>();
		List<Long> senderUserIds = new ArrayList<>();
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));

				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				prevUser = UserLocalServiceUtil.getUser(userId);
				prevUserName = prevUser.getFullName();

				List<KaleoTaskInstanceToken> kaleoTaskList = fetchKaleoDetails(journalArticle.getId(), Boolean.TRUE,
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DOCMakerReview_TASKNAME);

				if (Validator.isNotNull(kaleoTaskList) && kaleoTaskList.size() > 0) {
					KaleoTaskInstanceToken kaleoTask = kaleoTaskList.get(0);
					if (Validator.isNotNull(kaleoTask)) {
						completionUser = UserLocalServiceUtil.getUser(kaleoTask.getCompletionUserId());
						if (!mailIds.contains(completionUser.getEmailAddress())) {
							mailIds.add(completionUser.getEmailAddress());
						}
					}
				}

				// sending to DocMaker role
				roleDocMaker = RoleLocalServiceUtil.fetchRole(contentRequestor.getCompanyId(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_ROLE_DOC_MAKER);
				userListroleDocMaker = UserLocalServiceUtil.getRoleUsers(roleDocMaker.getRoleId());
				for (User userDocMaker : userListroleDocMaker) {
					if (!senderUserIds.contains(userDocMaker.getUserId())) {
						senderUserIds.add(userDocMaker.getUserId());
					}
				}

				comments = getcomments(classPk, companyId);
				
				body = RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_17
						+ journalArticle.getArticleId()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_18 + reqID
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
						+ contentRequestor.getRequestTitle()
						+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_6 + prevUserName;
				//
				// mailBody = body + commentStr + StringPool.PERIOD + "It is assigned to DOC
				// Maker.";
				// mailBody= LanguageUtil.format(ENGLISH_LOCALE,
				// "rbi.workflow.request.rejected",new String[] {
				// journalArticle.getArticleId(),reqID,contentRequestor.getRequestTitle(),prevUserName,commentStr,"DOC
				// Maker"});
				if (!StringPool.BLANK.equals(comments)) {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName, comments, "DOC Maker" });

				} else {
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "DOC Maker" });
					hindiMailBody = LanguageUtil.format(HINDI_LOCALE, RBI_WORKFLOW_REQUEST_REJECTED,
							new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
									prevUserName,StringPool.DASH, "DOC Maker" });

				}
				msgBody = body + StringPool.PERIOD;

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Rejected";

				_log.info("msgBody ::: " + msgBody);
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						if (!StringPool.BLANK.equals(mailBody)) {
							sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
						}
					}

					// custom dxp notification
					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							JournalArticle.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBI_TO_REDIRECT,
							RbiWorkflowEmailNotificationPortletKeys.FLAG_N);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId,
								senderUserId, payloadJSON.toString(), Boolean.TRUE);
					}
				}
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	}

	// Contnet-Only Workflow - To Task Assignee when Assignment
	// USING IN CONTENT-ONLY,FILE-ONLY WORKFLOW
	public static void assignmentNotifyForContent(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments) {
		assignmentMOXNotifyForContent(classPk, companyId, groupID, userId, entryType, comments, false);
	}

	public static void assignmentMOXNotifyForContent(String classPk, String companyId, String groupID, Long userId,
			String entryType, String comments, boolean isMoxUpdated) {
        if (_log.isInfoEnabled()) { _log.info("assignmentMOXNotifyForContent() start"); }

		String reqID = StringPool.BLANK;
		String prevUserName = StringPool.BLANK;
		String mailSubject = StringPool.BLANK;
		String body = StringPool.BLANK;
		String mailBody = StringPool.BLANK;
		String hindiMailBody = StringPool.BLANK;

		String msgBody = StringPool.BLANK;
		List<String> mailIds = new ArrayList<>();
		JournalArticle journalArticle = null;
		List<Long> senderUserIds = new ArrayList<>();
		ExpandoColumn expandoColumnReqId = null;
		ExpandoValue expandoValueReqId = null;
		long tableIdReqId = 0;
		long columnIdReqId = 0;
		Content_Requestor contentRequestor = null;
		User prevUser = null;
		List<User> roleUsers = new ArrayList<>();
		String kaleoInstanceId = "";
		String kaleoTaskInstanceTokenId = "";
		boolean isAssigneeUser = Boolean.FALSE; 
		// User completionUser = null;
		try {
			if (Validator.isNotNull(classPk)) {

				journalArticle = JournalArticleLocalServiceUtil.getArticle(Long.parseLong(classPk));
				User user = WorkflowPermissionCheckerUtil.fetchPermissionCheckerUser(journalArticle.getCompanyId());
				PermissionChecker permissionChecker = PermissionCheckerFactoryUtil.create(user);
				PermissionThreadLocal.setPermissionChecker(permissionChecker);
				expandoColumnReqId = ExpandoColumnLocalServiceUtil.getDefaultTableColumn(journalArticle.getCompanyId(),
						JournalArticle.class.getName(),
						RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_EXPD_FIELD_REQCODE);
				tableIdReqId = expandoColumnReqId.getTableId();
				columnIdReqId = expandoColumnReqId.getColumnId();
				expandoValueReqId = ExpandoValueLocalServiceUtil.getValue(tableIdReqId, columnIdReqId,
						journalArticle.getId());
				reqID = expandoValueReqId.getData();

				contentRequestor = Content_RequestorLocalServiceUtil.findByReqID(reqID).get(0);

				if (journalArticle.getId() > 0) {
					DynamicQuery dq = KaleoTaskInstanceTokenLocalServiceUtil.dynamicQuery();
					dq.add(RestrictionsFactoryUtil.eq(
							RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_CLASSPK,
							journalArticle.getId()));
					dq.add(RestrictionsFactoryUtil
							.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_COMPLETED, Boolean.FALSE));

					List<KaleoTaskInstanceToken> kaleoTaskInstanceTokenList = KaleoTaskInstanceTokenLocalServiceUtil
							.dynamicQuery(dq);

					_log.info("kaleoTaskInstanceTokenList : size ---- " + kaleoTaskInstanceTokenList.size());
					if (kaleoTaskInstanceTokenList != null) {
						for (KaleoTaskInstanceToken kaleoTaskInstanceToken : kaleoTaskInstanceTokenList) {
							kaleoTaskInstanceTokenId = String
									.valueOf(kaleoTaskInstanceToken.getKaleoTaskInstanceTokenId());
							kaleoInstanceId = String.valueOf(kaleoTaskInstanceToken.getKaleoInstanceId());

							DynamicQuery dq2 = KaleoTaskAssignmentInstanceLocalServiceUtil.dynamicQuery();
							dq2.add(RestrictionsFactoryUtil.eq(
									RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_KALEO_TASK_INSTANCE_TOKEN_ID,
									kaleoTaskInstanceToken.getKaleoTaskInstanceTokenId()));

							List<KaleoTaskAssignmentInstance> kaleoTaskAssignmentInstanceList = KaleoTaskAssignmentInstanceLocalServiceUtil
									.dynamicQuery(dq2);

							_log.info("kaleoTaskAssignmentInstanceList : size ---- "
									+ kaleoTaskAssignmentInstanceList.size());

							if (Validator.isNotNull(kaleoTaskAssignmentInstanceList)
									&& kaleoTaskAssignmentInstanceList.size() > 0) {
								KaleoTaskAssignmentInstance kaleoTaskAssignmentInstance = kaleoTaskAssignmentInstanceList
										.get(0);

								_log.info("kaleoTaskAssignmentInstance.getAssigneeClassName() ---- "
										+ kaleoTaskAssignmentInstance.getAssigneeClassName());

								if (kaleoTaskAssignmentInstance.getAssigneeClassName().equals(User.class.getName())) {
									
									isAssigneeUser = Boolean.TRUE; 
									User assigneeUser = UserLocalServiceUtil
											.getUser(kaleoTaskAssignmentInstance.getAssigneeClassPK());

									if (!senderUserIds.contains(assigneeUser.getUserId())) {
										senderUserIds.add(assigneeUser.getUserId());
									}
									if (!mailIds.contains(assigneeUser.getEmailAddress())) {
										mailIds.add(assigneeUser.getEmailAddress());
									}

								} else if (kaleoTaskAssignmentInstance.getAssigneeClassName()
										.equals(Role.class.getName())) {
									
									isAssigneeUser = Boolean.FALSE; 
									roleUsers = UserLocalServiceUtil
											.getRoleUsers(kaleoTaskAssignmentInstance.getAssigneeClassPK());
									for (User roleUser : roleUsers) {
										if (!mailIds.contains(roleUser.getEmailAddress())) {
											mailIds.add(roleUser.getEmailAddress());
										}
										if (!senderUserIds.contains(roleUser.getUserId())) {
											senderUserIds.add(roleUser.getUserId());
										}
									}
								}

								prevUser = UserLocalServiceUtil.getUser(kaleoTaskAssignmentInstance.getUserId());
								prevUserName = prevUser.getFullName();
							}
						}
					}
				}
				if (isMoxUpdated) {
					prevUser = UserLocalServiceUtil.fetchUserByEmailAddress(journalArticle.getCompanyId(),
							MOX_USER_NAME);
					prevUserName = prevUser.getFullName();
				}
				
				if(isAssigneeUser) {
					body = "Workflow for Publishing Request Number " + journalArticle.getArticleId()
					+ " of Request " + reqID + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					+ contentRequestor.getRequestTitle()
					+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_28 + prevUserName;
				}else {
					body = "Workflow for Publishing Request Number " + journalArticle.getArticleId()
					+ " of Request " + reqID + RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_2
					+ contentRequestor.getRequestTitle()
					+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_MAIL_BODY_16 + prevUserName;
				}
				
				
					mailBody = LanguageUtil.format(ENGLISH_LOCALE, RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
						new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(), "you",
								prevUserName });
				hindiMailBody = LanguageUtil.format(HINDI_LOCALE,
						RBI_REQUEST_OF_PUBLISHING_WORKFLOW_ASSIGNED_TO_USER_BODY,
						new String[] { journalArticle.getArticleId(), reqID, contentRequestor.getRequestTitle(),
								HINDI_YOU, prevUserName });

				mailSubject = "Publishing id " + journalArticle.getArticleId() + " is Assigned";

				long journalArticleClassPK = 0;
				if (journalArticle.getVersion() == 1) {
					journalArticleClassPK = journalArticle.getResourcePrimKey();
				} else {
					if (journalArticle.getStatus() == 1 || journalArticle.getStatus() == 7) {
						journalArticleClassPK = journalArticle.getId();
					} else if (journalArticle.getStatus() == 0) {
						journalArticleClassPK = journalArticle.getResourcePrimKey();
					}
				}
				String language = null;
				if(Validator.isNotNull(journalArticleClassPK)) {
					String publishedLanguage = getTranstionLanguage(journalArticleClassPK);
					if(Validator.isNotNull(publishedLanguage)) {
						String[] publishedLanguages = publishedLanguage.split(",");
						language = publishedLanguages[publishedLanguages.length - 1];						
					}
				}
			    boolean isApiUpdatedContent = (boolean) journalArticle.getExpandoBridge().getAttribute("isApiUpdatedContent");
			    if(isApiUpdatedContent) {
			    	if(Validator.isNotNull(language)) {			    		
			    		msgBody = body + " for "+ language+ StringPool.PERIOD;
			    	}else {
						msgBody = body + StringPool.PERIOD;
			    	}
			    }else {
					msgBody = body + StringPool.PERIOD;
			    }
				if (_log.isInfoEnabled()) { _log.info("mailBody (preview) ::: " + StringUtil.shorten(mailBody, 200)); };
				_log.info("mailSubject ::: " + mailSubject);
				String mailLink = PropsUtil
						.get(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_CONT_PUBL_MAIL_LINK);

				if (Validator.isNotNull(mailIds) && mailIds.size() > 0) {
					for (String email : mailIds) {
						sendEmail(mailSubject, mailBody, hindiMailBody, mailLink, email);
					}

					JSONObject payloadJSON = JSONFactoryUtil.createJSONObject();
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYTYPE,
							entryType);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_COMPID, companyId);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSPK,
							classPk);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_ENTRYCLASSNAME,
							Content_Requestor.class.getName());
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_GRPID, groupID);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_MSG, msgBody);
					payloadJSON.put(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_NOTIFICATION_USERID,
							String.valueOf(userId));
					payloadJSON.put("workflowTaskId", kaleoTaskInstanceTokenId);
					payloadJSON.put("workflowInstanceId", kaleoInstanceId);

					for (long senderUserId : senderUserIds) {
						RbiWorkflowEmailNotificationPortlet.sendCustomUserNotification(Long.parseLong(companyId),
								userId, senderUserId, payloadJSON.toString(), Boolean.FALSE);
					}
				}
				
				
			}
		} catch (NumberFormatException e) {
			_log.error("Unexpected error", e);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
	
        if (_log.isInfoEnabled()) { _log.info("assignmentMOXNotifyForContent() completed"); }
}
	
public static String getTranstionLanguage(long journalArticleClassPK){
		
		DynamicQuery dqLang = AssetVocabularyLocalServiceUtil.dynamicQuery();
		dqLang.add(RestrictionsFactoryUtil
				.ilike(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_NAME,
						StringPool.PERCENT
								+ RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_VOCABULARY_TRNSLTD_LANG
								+ StringPool.PERCENT));
		List<AssetVocabulary> langAssetVocabularies = AssetVocabularyLocalServiceUtil.dynamicQuery(dqLang);
		AssetVocabulary langAssetVocabulary = null;
		if (langAssetVocabularies.size() > 0) {
			langAssetVocabulary = langAssetVocabularies.get(0);
		}
		List<AssetCategory> langAssetCategories = AssetCategoryLocalServiceUtil
				.getVocabularyCategories(langAssetVocabulary.getVocabularyId(), -1, -1, null);
		StringBuffer transLangs = new StringBuffer();
		AssetEntry assetEntry = AssetEntryLocalServiceUtil.fetchEntry(JournalArticle.class.getName(), journalArticleClassPK);

		List<AssetEntryAssetCategoryRel> assetEntryAssetCategoryRels  = AssetEntryAssetCategoryRelLocalServiceUtil
				.getAssetEntryAssetCategoryRelsByAssetEntryId(assetEntry.getEntryId());

		for (AssetEntryAssetCategoryRel assetEntryAssetCategoryRel : assetEntryAssetCategoryRels) {
			long assetCategoryId = assetEntryAssetCategoryRel.getAssetCategoryId();

			if (langAssetCategories.size() > 0) {
				for (AssetCategory category : langAssetCategories) {
					if (category.getCategoryId() == assetCategoryId) {
						transLangs.append(category.getName());
						transLangs.append(StringPool.COMMA);
					}
				}
				
			}
		}

		return transLangs.toString();
		
	}
	private static Content_Requestor fetchContentRequest(Long contentRequestId) {
		Content_Requestor contentRequestor = null;
		try {
			contentRequestor = Content_RequestorLocalServiceUtil.getContent_Requestor(contentRequestId);
		} catch (PortalException e) {
			_log.error("Unexpected error", e);
		}
		return contentRequestor;
	}

	private static String getDate(String date) {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat defaultDateFormat = new SimpleDateFormat(
				RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DD_MM_YYYY_HH_MM_SS);
		try {
			return dateFormat.format(defaultDateFormat.parse(date));
		} catch (ParseException e) {
			_log.error(e);
		}
		return StringPool.BLANK;
	}

	private static String getTime(String date) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
		SimpleDateFormat defaultDateFormat = new SimpleDateFormat(
				RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DD_MM_YYYY_HH_MM_SS);
		try {
			return dateFormat.format(defaultDateFormat.parse(date));
		} catch (ParseException e) {
			_log.error(e);
		}
		return StringPool.BLANK;
	}

	private static List<KaleoTaskInstanceToken> fetchKaleoDetails(Long classPK, Boolean completed, String taskName) {
        if (_log.isInfoEnabled()) { _log.info("fetchKaleoDetails() start"); }

		List<KaleoTaskInstanceToken> kaleoTaskList = null;
		try {
			_log.info("---- fetchKaleoDetails for TASK NAME :::: " + taskName);
			DynamicQuery dynamicQuery = KaleoTaskInstanceTokenLocalServiceUtil.dynamicQuery();
			dynamicQuery.add(RestrictionsFactoryUtil
					.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_CLASSPK, classPK));
			dynamicQuery.add(RestrictionsFactoryUtil
					.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_COMPLETED, completed));
			dynamicQuery.add(RestrictionsFactoryUtil
					.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_KALEOTASKNAME, taskName));
			dynamicQuery.addOrder(
					OrderFactoryUtil.desc(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_CREATED_DATE));
			kaleoTaskList = KaleoTaskInstanceTokenLocalServiceUtil.dynamicQuery(dynamicQuery);

			_log.info("---- kaleoTaskList size :::: " + kaleoTaskList.size());

		} catch (Exception e) {
			_log.error("Unexpected error", e);
		}
		return kaleoTaskList;
	
        if (_log.isInfoEnabled()) { _log.info("fetchKaleoDetails() completed"); }
}

	public static String getcomments(String classPk, String companyId) {
        if (_log.isInfoEnabled()) { _log.info("getcomments() start"); }

		String comment = StringPool.BLANK;
		DynamicQuery dynamicQuery = KaleoTaskInstanceTokenLocalServiceUtil.dynamicQuery();
		dynamicQuery.add(RestrictionsFactoryUtil.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_CLASSPK, Long.parseLong(classPk)))
				.add(RestrictionsFactoryUtil.eq(RbiWorkflowEmailNotificationPortletKeys.RBIWORKFLOW_DYN_QRY_COMPLETED, true));

		List<KaleoTaskInstanceToken> kaleoTaskInstanceTokens = KaleoTaskInstanceTokenLocalServiceUtil
				.dynamicQuery(dynamicQuery);
		List<Integer> logTypes = new ArrayList<Integer>() {
			{
				add(3);
			}
		};
		if (Validator.isNotNull(kaleoTaskInstanceTokens) && kaleoTaskInstanceTokens.size() > 0) {
			List<WorkflowLog> workflowLogs = null;
			try {
				
				List<KaleoLog> kaleoLogs = KaleoLogLocalServiceUtil.getKaleoInstanceKaleoLogs(Long.parseLong(companyId),
						kaleoTaskInstanceTokens.get(0).getKaleoInstanceId(), logTypes, QueryUtil.ALL_POS,
						QueryUtil.ALL_POS, null);

				workflowLogs = toWorkflowLogs(kaleoLogs);
			} catch (NumberFormatException e) {
				_log.error("Unexpected error", e);
			}

			if (Validator.isNotNull(workflowLogs) && !workflowLogs.isEmpty()) {
				Collections.sort(workflowLogs, (e1, e2) -> e2.getCreateDate().compareTo(e1.getCreateDate()));
				comment = workflowLogs.get(0).getComment();
			}
		}
		return comment;
	
        if (_log.isInfoEnabled()) { _log.info("getcomments() completed"); }
}
	
	private static List<WorkflowLog> toWorkflowLogs(List<KaleoLog> kaleoLogs) {
		List<WorkflowLog> workflowLogs = new ArrayList<>(kaleoLogs.size());

		for (KaleoLog kaleoLog : kaleoLogs) {
			workflowLogs.add(toWorkflowLog(kaleoLog));
		}

		return workflowLogs;
	}
	
	private static WorkflowLog toWorkflowLog(KaleoLog kaleoLog) {
		DefaultWorkflowLog defaultWorkflowLog = new DefaultWorkflowLog();

		defaultWorkflowLog.setAuditUserId(kaleoLog.getUserId());
		defaultWorkflowLog.setComment(kaleoLog.getComment());
		defaultWorkflowLog.setCreateDate(kaleoLog.getCreateDate());
		defaultWorkflowLog.setPreviousWorkflowNode(
			getWorkflowNode(kaleoLog.getPreviousKaleoNodeId()));

		long previousAssigneeClassPK = kaleoLog.getPreviousAssigneeClassPK();

		if (previousAssigneeClassPK > 0) {
			String previousAssigneeClassName =
				kaleoLog.getPreviousAssigneeClassName();

			if (previousAssigneeClassName.equals(Role.class.getName())) {
				defaultWorkflowLog.setPreviousRoleId(previousAssigneeClassPK);
			}
			else {
				defaultWorkflowLog.setPreviousUserId(previousAssigneeClassPK);
			}
		}

		long currentAssigneeClassPK = kaleoLog.getCurrentAssigneeClassPK();

		if (currentAssigneeClassPK > 0) {
			String currentAssigneeClassName =
				kaleoLog.getCurrentAssigneeClassName();

			if (currentAssigneeClassName.equals(Role.class.getName())) {
				defaultWorkflowLog.setRoleId(currentAssigneeClassPK);
			}
			else {
				defaultWorkflowLog.setUserId(currentAssigneeClassPK);
			}
		}

		defaultWorkflowLog.setCurrentWorkflowNode(
			getWorkflowNode(kaleoLog.getKaleoClassPK()));
		defaultWorkflowLog.setType(KaleoLogUtil.convert(kaleoLog.getType()));
		defaultWorkflowLog.setWorkflowLogId(kaleoLog.getKaleoLogId());
		defaultWorkflowLog.setWorkflowTaskId(
			kaleoLog.getKaleoTaskInstanceTokenId());

		return defaultWorkflowLog;
	}
	
	private static WorkflowNode getWorkflowNode(long kaleoNodeId) {
		if (kaleoNodeId == 0) {
			return null;
		}

		try {
			return toWorkflowNode(
				KaleoNodeLocalServiceUtil.getKaleoNode(kaleoNodeId));
		}
		catch (PortalException portalException) {
			if (_log.isDebugEnabled()) {
				_log.debug(portalException);
			}
		}

		return null;
	}
	
	private static WorkflowNode toWorkflowNode(KaleoNode kaleoNode) {
		DefaultWorkflowNode defaultWorkflowNode = new DefaultWorkflowNode();

		defaultWorkflowNode.setLabelMap(kaleoNode.getLabelMap());
		defaultWorkflowNode.setName(kaleoNode.getName());

		WorkflowNode.Type workflowNodeType = WorkflowNode.Type.valueOf(
			kaleoNode.getType());

		if (Objects.equals(workflowNodeType, WorkflowNode.Type.STATE)) {
			if (kaleoNode.isInitial()) {
				workflowNodeType = WorkflowNode.Type.INITIAL_STATE;
			}
			else if (kaleoNode.isTerminal()) {
				workflowNodeType = WorkflowNode.Type.TERMINAL_STATE;
			}
		}

		defaultWorkflowNode.setType(workflowNodeType);

		return defaultWorkflowNode;
	}
	
	private static final Log _log = LogFactoryUtil.getLog(RbiWorkflowEmailNotificationPortlet.class.getName());
	

private static String preview(Object o, int len) {
    if (o == null) {
        return "null";
    }
    String s = String.valueOf(o);
    return s.length() <= len ? s : s.substring(0, len) + "...";
}
public static final String MOX_USER_NAME = "mox@liferay.com";
		

}